"""Promotes values for better query performance.

Revision ID: ce5c4ac967d8
Revises: 3097592c0739
Create Date: 2021-11-18 10:09:22.330772

"""
from alembic import op
import sqlalchemy as sa
import enum
from collections import Counter

from sqlalchemy import Column, DateTime, ForeignKey, Integer, String, Numeric
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, Session


Base = declarative_base()


# revision identifiers, used by Alembic.
revision = "ce5c4ac967d8"
down_revision = "3097592c0739"
branch_labels = None
depends_on = None


class ParticipantRoleType(enum.Enum):
    incident_commander = "Incident Commander"
    scribe = "Scribe"
    liaison = "Liaison"
    participant = "Participant"
    reporter = "Reporter"


class DocumentResourceTypes(enum.Enum):
    executive = "dispatch-executive-report-document"
    review = "dispatch-incident-review-document"
    tracking = "dispatch-incident-sheet"
    incident = "dispatch-incident-document"


class IncidentCost(Base):
    __tablename__ = "incident_cost"
    id = Column(Integer, primary_key=True)
    amount = Column(Numeric(precision=10, scale=2), nullable=True)
    incident_id = Column(Integer, ForeignKey("incident.id"))


class ParticipantRole(Base):
    __tablename__ = "participant_role"
    id = Column(Integer, primary_key=True)
    assumed_at = Column(DateTime)
    renounced_at = Column(DateTime)
    role = Column(String, default=ParticipantRoleType.participant)
    participant_id = Column(Integer, ForeignKey("participant.id"))


class Participant(Base):
    __tablename__ = "participant"
    id = Column(Integer, primary_key=True)
    participant_roles = relationship("ParticipantRole", backref="participant")
    incident_id = Column(Integer, ForeignKey("incident.id"))


class Document(Base):
    __tablename__ = "document"
    id = Column(Integer, primary_key=True)
    incident_id = Column(Integer, ForeignKey("incident.id"))
    resource_type = Column(String)


class Incident(Base):
    __tablename__ = "incident"
    id = Column(Integer, primary_key=True)
    total_cost = Column(Numeric)
    participants_team = Column(String)
    participants_location = Column(String)
    commanders_location = Column(String)
    reporters_location = Column(String)

    incident_costs = relationship("IncidentCost")
    documents = relationship("Document")
    participants = relationship("Participant")
    # groups = relationship("Group")

    commander_id = Column(Integer, ForeignKey("participant.id"))
    reporter_id = Column(Integer, ForeignKey("participant.id"))
    liaison_id = Column(Integer, ForeignKey("participant.id"))
    scribe_id = Column(Integer, ForeignKey("participant.id"))
    incident_document_id = Column(Integer, ForeignKey("document.id"))
    incident_review_document_id = Column(Integer, ForeignKey("document.id"))
    # tactical_group_id = Column(Integer, ForeignKey["group.id"])
    # notification_group_id = Column(Integer, ForeignKey["group.id"])


def get_current_participant(participants, role):
    participant_roles = []
    for p in participants:
        for pr in p.participant_roles:
            if pr.role == role:
                participant_roles.append(pr)

    if participant_roles:
        return sorted(participant_roles, key=lambda pr: pr.assumed_at)[-1].participant


def get_current_document(documents, resource_type):
    for d in documents:
        if d.resource_type == resource_type:
            return d


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("incident", sa.Column("total_cost", sa.Numeric(), nullable=True))
    op.add_column("incident", sa.Column("participants_team", sa.String(), nullable=True))
    op.add_column("incident", sa.Column("participants_location", sa.String(), nullable=True))
    op.add_column("incident", sa.Column("commanders_location", sa.String(), nullable=True))
    op.add_column("incident", sa.Column("reporters_location", sa.String(), nullable=True))
    op.add_column("incident", sa.Column("commander_id", sa.Integer(), nullable=True))
    op.add_column("incident", sa.Column("reporter_id", sa.Integer(), nullable=True))
    op.add_column("incident", sa.Column("liaison_id", sa.Integer(), nullable=True))
    op.add_column("incident", sa.Column("scribe_id", sa.Integer(), nullable=True))
    op.add_column("incident", sa.Column("incident_document_id", sa.Integer(), nullable=True))
    op.add_column("incident", sa.Column("incident_review_document_id", sa.Integer(), nullable=True))
    op.create_foreign_key(None, "incident", "document", ["incident_document_id"], ["id"])
    op.create_foreign_key(None, "incident", "participant", ["reporter_id"], ["id"])
    op.create_foreign_key(None, "incident", "participant", ["scribe_id"], ["id"])
    op.create_foreign_key(None, "incident", "participant", ["commander_id"], ["id"])
    op.create_foreign_key(None, "incident", "participant", ["liaison_id"], ["id"])
    op.create_foreign_key(None, "incident", "document", ["incident_review_document_id"], ["id"])

    bind = op.get_bind()
    session = Session(bind=bind)

    incidents = session.query(Incident).all()

    for incident in incidents:
        cost = 0
        for cost in incident.incident_costs:
            cost += cost.amount

        incident.total_cost = cost

        incident.participants_team = Counter(p.team for p in incident.participants).most_common(1)[
            0
        ][0]
        incident.participants_location = Counter(
            p.location for p in incident.participants
        ).most_common(1)[0][0]

        commanders_locations = []
        for p in incident.participants:
            for pr in p.participant_roles:
                if pr.role == ParticipantRoleType.incident_commander:
                    commanders_locations.append(p.location)
        incident.commanders_location = Counter(commanders_locations).most_common(1)[0][0]

        reporters_locations = []
        for p in incident.participants:
            for pr in p.participant_roles:
                if pr.role == ParticipantRoleType.reporter:
                    reporters_locations.append(p.location)
        incident.reporters_location = Counter(reporters_locations).most_common(1)[0][0]

        commander = get_current_participant(
            incident.participants, ParticipantRoleType.incident_commander
        )
        if commander:
            incident.commander_id = commander.id

        reporter = get_current_participant(incident.participants, ParticipantRoleType.reporter)
        if reporter:
            incident.reporter_id = reporter.id

        liaison = get_current_participant(incident.participants, ParticipantRoleType.liaison)
        if liaison:
            incident.liaison_id = liaison.id

        scribe = get_current_participant(incident.participants, ParticipantRoleType.scribe)
        if scribe:
            incident.scribe_id = scribe.id

        incident_document = get_current_document(incident.documents, DocumentResourceTypes.incident)
        if incident_document:
            incident.incident_document_id = incident_document.id

        incident_review_document = get_current_document(
            incident.documents, DocumentResourceTypes.review
        )
        if incident_review_document:
            incident.incident_review_document_id = incident_review_document.id

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "incident", type_="foreignkey")
    op.drop_constraint(None, "incident", type_="foreignkey")
    op.drop_constraint(None, "incident", type_="foreignkey")
    op.drop_constraint(None, "incident", type_="foreignkey")
    op.drop_constraint(None, "incident", type_="foreignkey")
    op.drop_constraint(None, "incident", type_="foreignkey")
    op.drop_column("incident", "incident_review_document_id")
    op.drop_column("incident", "incident_document_id")
    op.drop_column("incident", "scribe_id")
    op.drop_column("incident", "liaison_id")
    op.drop_column("incident", "reporter_id")
    op.drop_column("incident", "commander_id")
    op.drop_column("incident", "primary_location")
    op.drop_column("incident", "primary_team")
    op.drop_column("incident", "total_cost")
    # ### end Alembic commands ###
