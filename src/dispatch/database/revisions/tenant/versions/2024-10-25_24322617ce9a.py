"""Adds configuration to the Dispatch Ticket PluginInstance

Revision ID: 24322617ce9a
Revises: 3c49f62d7914
Create Date: 2024-10-25 15:15:38.078421

"""

from alembic import op
from pydantic import SecretStr, ValidationError
from pydantic.json import pydantic_encoder

from sqlalchemy import Column, Integer, ForeignKey, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, Session
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy_utils import StringEncryptedType
from sqlalchemy_utils.types.encrypted.encrypted_type import AesEngine
from dispatch.config import DISPATCH_ENCRYPTION_KEY

# revision identifiers, used by Alembic.
revision = "24322617ce9a"
down_revision = "3c49f62d7914"
branch_labels = None
depends_on = None

Base = declarative_base()


def show_secrets_encoder(obj):
    if isinstance(obj, SecretStr):
        return obj.get_secret_value()
    else:
        return pydantic_encoder(obj)


def migrate_config(instances, slug, config):
    for instance in instances:
        if slug == instance.plugin.slug:
            instance.configuration = config


class Plugin(Base):
    __tablename__ = "plugin"
    __table_args__ = {"schema": "dispatch_core"}
    id = Column(Integer, primary_key=True)
    slug = Column(String, unique=True)


class PluginInstance(Base):
    __tablename__ = "plugin_instance"
    id = Column(Integer, primary_key=True)
    _configuration = Column(
        StringEncryptedType(key=str(DISPATCH_ENCRYPTION_KEY), engine=AesEngine, padding="pkcs5")
    )
    plugin_id = Column(Integer, ForeignKey(Plugin.id))
    plugin = relationship(Plugin, backref="instances")

    @hybrid_property
    def configuration(self):
        """Property that correctly returns a plugins configuration object."""
        pass

    @configuration.setter
    def configuration(self, configuration):
        """Property that correctly sets a plugins configuration object."""
        if configuration:
            self._configuration = configuration.json(encoder=show_secrets_encoder)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    from dispatch.plugins.dispatch_core.config import DispatchTicketConfiguration

    bind = op.get_bind()
    session = Session(bind=bind)

    instances = session.query(PluginInstance).all()

    try:
        dispatch_ticket_config = DispatchTicketConfiguration(
            use_incident_name=False,
        )

        migrate_config(instances, "dispatch-ticket", dispatch_ticket_config)

    except ValidationError:
        print(
            "Skipping automatic migration of Dispatch ticket plugin, if you are using the Dispatch ticket plugin, please manually migrate."
        )

    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
