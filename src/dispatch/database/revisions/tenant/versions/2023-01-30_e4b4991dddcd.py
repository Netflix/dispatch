"""empty message

Revision ID: e4b4991dddcd
Revises: 956eb8f8987e
Create Date: 2023-01-30 10:52:31.676368

"""
from alembic import op
from datetime import datetime
from enum import Enum
from pydantic import Field, BaseModel
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy.ext.declarative import declarative_base
from typing import Optional, List

# revision identifiers, used by Alembic.
revision = "e4b4991dddcd"
down_revision = "956eb8f8987e"
branch_labels = None
depends_on = None


Base = declarative_base()


class Case(Base):
    __tablename__ = "Case"
    id = sa.Column(sa.Integer, primary_key=True)

    assignee_id = sa.Column(sa.Integer, sa.ForeignKey("dispatch_core.dispatch_user.id"))
    _assignee_id = sa.Column(sa.Integer, sa.ForeignKey("participant.id"))

    assignee = sa.relationship("DispatchUser", foreign_keys=[assignee_id], post_update=True)
    _assignee = sa.relationship(
        "Participant", foreign_keys=[_assignee_id], lazy="subquery", post_update=True
    )


# Pydantic models...
class DispatchBase(BaseModel):
    class Config:
        orm_mode = True
        validate_assignment = True
        arbitrary_types_allowed = True
        anystr_strip_whitespace = True


class DispatchEnum(str, Enum):
    def __str__(self) -> str:
        return str.__str__(self)


class Participant(Base):
    __tablename__ = "participant"
    id = sa.Column(sa.Integer, primary_key=True)


class ParticipantRoleBase(DispatchBase):
    role: str


class ParticipantRoleType(DispatchEnum):
    assignee = "Assignee"
    reporter = "Reporter"


class ParticipantRoleCreate(ParticipantRoleBase):
    role: Optional[ParticipantRoleType]


class ParticipantBase(DispatchBase):
    location: Optional[str] = Field(None, nullable=True)
    team: Optional[str] = Field(None, nullable=True)
    department: Optional[str] = Field(None, nullable=True)
    added_reason: Optional[str] = Field(None, nullable=True)


class ParticipantCreate(ParticipantBase):
    participant_roles: Optional[List[ParticipantRoleCreate]] = []
    location: Optional[str] = Field(None, nullable=True)
    team: Optional[str] = Field(None, nullable=True)
    department: Optional[str] = Field(None, nullable=True)


class ParticipantRole(Base):
    id = sa.Column(sa.Integer, primary_key=True)
    assumed_at = sa.Column(sa.DateTime, default=datetime.utcnow)
    renounced_at = sa.Column(sa.DateTime)
    role = sa.Column(sa.String, default=ParticipantRoleType.participant)
    activity = sa.Column(sa.Integer, default=0)
    participant_id = sa.Column(sa.Integer, sa.ForeignKey("participant.id", ondelete="CASCADE"))


def create_participant_role(
    *, db_session, participant_role_in: ParticipantRoleCreate
) -> ParticipantRole:
    """Creates a new participant role."""
    participant_role = ParticipantRole(**participant_role_in.dict())
    db_session.add(participant_role)
    return participant_role


def create_participant(db_session: Session, participant_in: ParticipantCreate) -> Participant:
    """Create a new participant."""
    participant_roles = [
        create_participant_role(db_session=db_session, participant_role_in=participant_role)
        for participant_role in participant_in.participant_roles
    ]

    return Participant(
        **participant_in.dict(exclude={"participant_roles", "service"}),
        service=None,
        participant_roles=participant_roles,
    )


def is_participant(db_session: Session, participant_id: int) -> bool:
    return (
        True
        if db_session.query(Participant).filter(Participant.id == participant_id).first()
        is not None
        else False
    )


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Case") as batch_op:
        batch_op.add_column("case", sa.Column("participants_team", sa.String(), nullable=True))
        batch_op.add_column("case", sa.Column("participants_location", sa.String(), nullable=True))
        batch_op.drop_constraint("case_assignee_id_fkey", "case", type_="foreignkey")
        batch_op.create_foreign_key(None, "case", "participant", ["assignee_id"], ["id"])
        batch_op.add_column("participant", sa.Column("case_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(
            None, "participant", "case", ["case_id"], ["id"], ondelete="CASCADE", use_alter=True
        )

    print("Migrating case assignees to Participant from DispatchUser..")

    bind = op.get_bind()
    db_session = Session(bind=bind)

    i = 0
    for case in db_session.query(Case):
        print(f"Processing Case {case.id}...")
        if not is_participant(db_session, participant_id=case.assignee_id) and case.assignee:
            i += 1
            print(f"Migrating {case.assignee}... associated with Case {case.id}")

            location = "Unknown"
            team = "Unknown"
            department = "Unknown"

            role = ParticipantRoleType.assignee
            participant_role = ParticipantRoleCreate(role=role)

            participant_in = ParticipantCreate(
                participant_roles=[participant_role],
                team=team,
                department=department,
                location=location,
            )
            participant = create_participant(db_session, participant_in=participant_in)
            db_session.add(participant)

            case._assignee_id = participant.id
            case._assignee = participant
            participant.case_id = case.id

    db_session.commit()
    print(f"{i} Case assignees migrated from DispatchUser to Participant..")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Case") as batch_op:
        batch_op.drop_constraint(None, "participant", type_="foreignkey")
        batch_op.drop_column("participant", "case_id")
        batch_op.drop_constraint(None, "case", type_="foreignkey")
        batch_op.create_foreign_key(
            "case_assignee_id_fkey",
            "case",
            "dispatch_user",
            ["assignee_id"],
            ["id"],
            referent_schema="dispatch_core",
        )
        batch_op.drop_column("case", "participants_location")
        batch_op.drop_column("case", "participants_team")
    # ### end Alembic commands ###
