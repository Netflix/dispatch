"""Adds a data model for tag types

Revision ID: 1a4a20476cc4
Revises: 189759c2b5bf
Create Date: 2020-10-08 13:25:25.071183

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils

from dispatch.tag import service as tag_service
from dispatch.tag_type import service as tag_type_service
from dispatch.tag_type.models import TagTypeCreate

# revision identifiers, used by Alembic.
revision = "1a4a20476cc4"
down_revision = "189759c2b5bf"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("search_vector", sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(
        "ix_tag_type_search_vector",
        "tag_type",
        ["search_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.add_column("tag", sa.Column("tag_type_id", sa.Integer(), nullable=True))
    op.create_foreign_key(None, "tag", "tag_type", ["tag_type_id"], ["id"])

    print("Migrating tag types...")
    conn = op.get_bind()
    session = sa.orm.Session(bind=conn)
    tags = conn.execute("select id, type from tag").fetchall()
    for tag in tags:
        tag_type_in = TagTypeCreate(name=tag.type, description=tag.type)
        tag_type = tag_type_service.get_or_create(db_session=session, tag_type_in=tag_type_in)
        tag = tag_service.get(db_session=session, tag_id=tag.id)
        tag.tag_type = tag_type
        session.add(tag)
    session.commit()
    print("Migrating tag types completed.")

    op.drop_column("tag", "type")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("tag", sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, "tag", type_="foreignkey")
    op.drop_column("tag", "tag_type_id")
    op.drop_index("ix_tag_type_search_vector", table_name="tag_type")
    op.drop_table("tag_type")
    # ### end Alembic commands ###
