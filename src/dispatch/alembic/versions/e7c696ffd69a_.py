"""Replaces application table with tag table.

Revision ID: e7c696ffd69a
Revises: b12f7a59ced9
Create Date: 2020-03-21 18:15:33.609234

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = "e7c696ffd69a"
down_revision = "b12f7a59ced9"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("uri", sa.String(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("search_vector", sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(
        "ix_tag_search_vector", "tag", ["search_vector"], unique=False, postgresql_using="gin"
    )
    op.create_table(
        "tags_incidents",
        sa.Column("incident_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["incident_id"],
            ["incident.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("incident_id", "tag_id"),
    )
    op.drop_table("applications_incidents")
    op.drop_index("ix_application_search_vector", table_name="application")
    op.drop_table("application")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "application",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('application_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("uri", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("source", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("search_vector", postgresql.TSVECTOR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="application_pkey"),
        sa.UniqueConstraint("name", name="application_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_application_search_vector", "application", ["search_vector"], unique=False)
    op.create_table(
        "applications_incidents",
        sa.Column("incident_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("application_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["application.id"],
            name="applications_incidents_application_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["incident_id"], ["incident.id"], name="applications_incidents_incident_id_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "incident_id", "application_id", name="applications_incidents_pkey"
        ),
    )
    op.drop_table("tags_incidents")
    op.drop_index("ix_tag_search_vector", table_name="tag")
    op.drop_table("tag")
    # ### end Alembic commands ###
