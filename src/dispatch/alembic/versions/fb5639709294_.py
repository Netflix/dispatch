"""Migrates a plugin's configuration to a
per project instance.

Revision ID: fb5639709294
Revises: 4cd620d11663
Create Date: 2021-04-16 11:35:15.473228

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.orm import Session
from sqlalchemy.dialects import postgresql

from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

# revision identifiers, used by Alembic.
revision = "fb5639709294"
down_revision = "4cd620d11663"
branch_labels = None
depends_on = None


class Project(Base):
    __tablename__ = "project"
    id = sa.Column(sa.Integer, primary_key=True)


class Plugin(Base):
    __tablename__ = "plugin"
    id = sa.Column(sa.Integer, primary_key=True)
    enabled = sa.Column(sa.Boolean)
    configuration = sa.Column(sqlalchemy_utils.types.json.JSONType())
    project_id = sa.Column(sa.Integer, sa.ForeignKey("project.id"))


class PluginInstance(Base):
    __tablename__ = "plugin_instance"
    id = sa.Column(sa.Integer, primary_key=True)
    enabled = sa.Column(sa.Boolean)
    configuration = sa.Column(sqlalchemy_utils.types.json.JSONType())
    plugin_id = sa.Column(sa.Integer, sa.ForeignKey("plugin.id"))
    project_id = sa.Column(sa.Integer, sa.ForeignKey("project.id"))


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    op.create_table(
        "plugin_instance",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=True),
        sa.Column("configuration", sqlalchemy_utils.types.json.JSONType(), nullable=True),
        sa.Column("plugin_id", sa.Integer(), nullable=True),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["plugin_id"],
            ["plugin.id"],
        ),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    # migrate current plugin configuration to it's own instance
    for p in session.query(Plugin).all():
        session.add(
            PluginInstance(
                project_id=p.project_id,
                plugin_id=p.id,
                enabled=p.enabled,
                configuration=p.configuration,
            )
        )
    session.flush()

    op.drop_constraint("plugin_project_id_fkey", "plugin", type_="foreignkey")
    op.drop_column("plugin", "enabled")
    op.drop_column("plugin", "project_id")
    op.drop_column("plugin", "configuration")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    op.add_column(
        "plugin",
        sa.Column(
            "configuration",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "plugin", sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.add_column("plugin", sa.Column("enabled", sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.create_foreign_key(
        "plugin_project_id_fkey", "plugin", "project", ["project_id"], ["id"], ondelete="CASCADE"
    )

    for i in session.query(PluginInstance).all():
        plugin = session.query(Plugin).filter(Plugin.id == i.plugin_id).one()
        plugin.enabled = i.enabled
        plugin.configuration = i.configuration
        plugin.project_id = i.project_id
        session.add(plugin)
    session.flush()

    op.drop_table("plugin_instance")
    # ### end Alembic commands ###
